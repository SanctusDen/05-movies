{"version":3,"file":"static/js/134.5a3a0dc4.chunk.js","mappings":"4LAEaA,EAAS,kBACpB,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,UACV,cAAY,SACZC,QAAQ,cARU,C,6JCATC,EAASC,EAAAA,OAAAA,OAAH,+lBAeb,IA+BOC,EAAUD,EAAAA,OAAAA,QAAH,sBAEPE,EAAYF,EAAAA,OAAAA,IAAH,6LAaTG,EAAgBH,EAAAA,OAAAA,IAAH,+E,0HCgB1B,UArEe,WACb,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAO,mCAAG,kHAEaC,EAAAA,EAAAA,MAFb,uBAEJC,EAFI,EAEJA,OAFI,SAGOA,EAAOC,OAHd,OAGNC,EAHM,OAIZC,QAAQC,IAAIF,GAJA,kDAMZC,QAAQC,IAAR,MANY,0DAAH,qDASbN,GAVkB,CAWnB,GAAE,CAACH,KAEJE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,6FACdP,GAAW,GADG,mBAGcQ,EAAAA,EAAAA,IAAiBJ,GAH/B,gBAGJU,EAHI,EAGJA,QACRhB,EAAU,CAACgB,IAJC,gDAMZF,QAAQC,IAAI,KAAME,SANN,yBAQZf,GAAW,GARC,4EAAH,qDAWbO,GACD,GAAE,CAACH,IAWJ,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,wBAAI,YACJ,iBAAMY,SAdO,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAcF,EAAEG,OAAOC,SAASC,eAAeC,MACrDX,QAAQC,IAAIM,GAEZhB,EAAgB,CAAEqB,YAAaL,GAChC,EAOO,UACE,4BACE,kBAAOM,KAAK,OAAOC,YAAY,gBAAgBC,UAAQ,QAI1D5B,GACC,SAAC,IAAD,KAEA,8BAAqB,IAAlBF,EAAO+B,SAAgB,0BAAI,YAAUxB,EAAM,aAIlD,sBAIP,C,sICxEKyB,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QALY,sCASHC,EAAgB,mCAAG,sGACPL,EAASxB,IAAI,uBADN,uBACtBM,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAKhBH,EAAgB,mCAAG,WAAMJ,GAAN,yFACPyB,EAASxB,IAAI,gBAAiB,CACnD2B,OAAQ,CACN5B,MAAOA,KAHmB,uBACtBO,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,sDAShBwB,EAAe,mCAAG,WAAMC,GAAN,yFACNP,EAASxB,IAAT,iBAAuB+B,IADjB,uBACrBzB,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qD","sources":["components/Loader/Loader.jsx","components/SharedLayout/SharedLayout.styled.jsx","pages/Movies.jsx","services/api.jsx"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => (\n  <ThreeDots\n    height=\"80\"\n    width=\"80\"\n    radius=\"9\"\n    color=\"#3fc9ff\"\n    ariaLabel=\"loading\"\n    text-alight=\"center\"\n    content=\"Loading...\"\n  />\n);\n","import { styled } from 'styled-components';\n\nexport const Header = styled.header`\n  padding: 20px;\n  font-size: 16px;\n  display: flex;\n  justify-content: space-between;\n  background-color: #000;\n  a {\n    text-decoration: none;\n  }\n\n  nav {\n    display: flex;\n    gap: 20px;\n\n    ${\n      '' /* margin-left: auto;\n    margin-right: auto; */\n    }\n  }\n  nav > a {\n    color: #fff;\n    text-decoration: none;\n\n    font-weight: 400;\n    font-size: 16px;\n    &:hover,\n    &:focus,\n    &:active {\n      color: #3fc9ff;\n    }\n  }\n\n  span {\n    font-weight: 600;\n    font-size: 20px;\n    color: #fff;\n    cursor: pointer;\n\n    &:hover,\n    &:focus,\n    &:active {\n      color: #3fc9ff;\n    }\n  }\n`;\n\nexport const Section = styled.section``;\n\nexport const Container = styled.div`\n  padding: 0px 20px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1440px;\n  overflow: hidden;\n\n  h1 {\n    color: #fff;\n    font-size: 28px;\n  }\n`;\n\nexport const MoviesWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 30px;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport {\n  Container,\n  MoviesWrapper,\n  Section,\n} from 'components/SharedLayout/SharedLayout.styled';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSerchMovies } from 'services/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n    const details = async () => {\n      try {\n        const { result } = await fetchSerchMovies();\n        const data = await result.json();\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    details();\n  }, [query]);\n\n  useEffect(() => {\n    const details = async () => {\n      setLoading(true);\n      try {\n        const { results } = await fetchSerchMovies(query);\n        setMovies([results]);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    details();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const searchValue = e.target.elements.searchMoviesId.value;\n    console.log(searchValue);\n\n    setSearchParams({ queryMovies: searchValue });\n  };\n\n  return (\n    <Section>\n      <Container>\n        <MoviesWrapper>\n          <h1>Movies</h1>\n          <form onSubmit={handleSubmit}>\n            <label>\n              <input type=\"text\" placeholder=\"Search Movies\" required />\n            </label>\n          </form>\n\n          {loading ? (\n            <Loader />\n          ) : (\n            <>{movies.length !== 0 && <h2>Movies: '{query}'</h2>}</>\n          )}\n        </MoviesWrapper>\n\n        <ul></ul>\n      </Container>\n    </Section>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\n// const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e61641c86f787a123ab79c28a2fcf6ec';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const fetchSerchMovies = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query: query,\n    },\n  });\n  return data;\n};\n\nexport const fetchAllDetails = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const fetchActor = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["Loader","height","width","radius","color","ariaLabel","content","Header","styled","Section","Container","MoviesWrapper","useState","movies","setMovies","loading","setLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","details","fetchSerchMovies","result","json","data","console","log","results","message","onSubmit","e","preventDefault","searchValue","target","elements","searchMoviesId","value","queryMovies","type","placeholder","required","length","instance","axios","baseURL","params","api_key","fetchTrendMovies","fetchAllDetails","id"],"sourceRoot":""}